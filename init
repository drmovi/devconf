#!/bin/bash

INIT_DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$INIT_DIR" ]]; then INIT_DIR="$PWD"; fi

# shellcheck source=./configs
source "$INIT_DIR/configs"

# shellcheck source=./framework
source "$INIT_DIR/framework"

init() {
  composer_init
  framework_select
  set_vendor_name
  mode_select
  set_configs
  add_composer_safe_plugin
  install_phpstan_package
  install_psalm_package
  install_style_checker_fixer
  install_php_package_generator
  install_phpstan_package_boundaries_plugin
  #  install_composer_microservice_plugin
  install_php_unit
  git_commit
  link_vendor_to_app
}

composer_init() {
  composer init --name=drmovi/microservie --description="microservice monorepo" --author="Mostafa Darwish" --type=monorepo --stability=dev --license=MIT --no-interaction
}

git_commit() {
  cp "$INIT_DIR"/git/.gitignore ./.gitignore
  git add .
  git commit -m "initial commit"
  cat "$INIT_DIR"/git/pre-commit >./.git/hooks/pre-commit
  chmod +x ./.git/hooks/pre-commit
}

add_composer_safe_plugin() {
  composer config --no-plugins allow-plugins.phpstan/extension-installer true
  composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
  composer config --no-plugins allow-plugins.drmovi/composer-microservice-plugin true
}

install_php_package_generator() {
  composer require --dev --with-all-dependencies drmovi/package-generator
}

install_composer_microservice_plugin() {
  composer require --dev --with-all-dependencies drmovi/composer-microservice-plugin
}

install_phpstan_microservice_boundaries_plugin() {
  composer require --dev --with-all-dependencies drmovi/phpstan-microservice-boundaries-plugin
}

install_phpstan_package() {
  composer require --dev --with-all-dependencies --no-interaction phpstan/phpstan phpstan/extension-installer
  framework_install_phpstan
  mkdir -p microservices
  mkdir -p "$DEV_CONF_PATH" && rm -f "$DEV_CONF_PATH"/phpstan.neon && rm -f "$DEV_CONF_PATH"/phpstan-baseline.neon && touch "$DEV_CONF_PATH"/phpstan-baseline.neon
  cp "$INIT_DIR"/conf/phpstan.neon "$DEV_CONF_PATH"/phpstan.neon
  phpstan_baseline
}

install_psalm_package() {
  composer require --dev --with-all-dependencies --no-interaction vimeo/psalm
  mkdir -p devconf && rm -f "$DEV_CONF_PATH"/psalm.xml
  cp "$INIT_DIR"/conf/psalm.xml "$DEV_CONF_PATH"/psalm.xml
  framework_install_psalm
  ./vendor/bin/psalm --config=./"$DEV_CONF_PATH"/psalm.xml --set-baseline=psalm-baseline.xml --no-cache
}

install_style_checker_fixer() {
  framework_install_style_checker_fixer
}

install_php_unit() {
  composer require --dev --with-all-dependencies --no-interaction phpunit/phpunit
  cp "$INIT_DIR"/conf/phpunit.xml ./
}

mode_select() {
  echo 'Select monorepo mode:'
  PS3='Please enter your choice: '
  local options=("Microservice")
  select opt in "${options[@]}"; do
    case $opt in
    "Microservice")
      _set_mode "microservice"
      break
      ;;
    "Quit")
      return
      ;;
    *) echo invalid option ;;
    esac
  done
}

phpstan() {
  ./vendor/bin/phpstan analyse --memory-limit=2G --configuration="$DEV_CONF_PATH"/phpstan.neon --debug
  ./vendor/bin/phpstan clear-result-cache
}

phpstan_baseline() {
  ./vendor/bin/phpstan analyse --memory-limit=2G --configuration="$DEV_CONF_PATH"/phpstan.neon --allow-empty-baseline --generate-baseline="$DEV_CONF_PATH"/phpstan-baseline.neon
}

psalm() {
  ./vendor/bin/psalm --config=./"$DEV_CONF_PATH"/psalm.xml --update-baseline --set-baseline=psalm-baseline.xml --no-cache
}

psalm_baseline() {
  ./vendor/bin/psalm --config=./"$DEV_CONF_PATH"/psalm.xml --update-baseline --no-cache
}

test() {
  ./vendor/bin/phpunit --configuration ./phpunit.xml
}

test_with_clover_coverage() {
  php -dxdebug.mode=coverage ./vendor/bin/phpunit --configuration ./phpunit.xml --coverage-clover ./coverage/clover.xml
}

test_with_html_coverage() {
  php -dxdebug.mode=coverage ./vendor/bin/phpunit --configuration ./phpunit.xml --coverage-html ./coverage
}

style_fix() {
  framework_style_fix
}

style_check() {
  framework_style_check
}

set_configs() {
  composer config extra.monorepo.package_path "$PACKAGE_PATH"
  composer config extra.monorepo.app_path "$APP_PATH"
  composer config extra.phpstan-package-boundaries-plugin.packages_path "$PACKAGE_PATH"
  composer config --json extra.phpstan-package-boundaries-plugin.whitelist_packages "[\"$PACKAGE_PATH\"]"
}

set_vendor_name() {
  echo "Enter vendor name: (name will be used as namespace prefix and for composer package name prefix as well)"
  read -r vendor_name
  local regex='^[a-z_]+$'
  if [[ $vendor_name =~ $regex ]]; then
    composer config extra.monorepo.vendor_name "$vendor_name"
  else
    echo "Invalid name prefix. it should match the regex: $regex"
    set_vendor_name
  fi
}

link_vendor_to_app() {
  ln -s ./../vendor ./$APP_PATH
}

install_phpstan_package_boundaries_plugin() {
  composer require --dev --with-all-dependencies drmovi/phpstan-package-boundaries-plugin
}

artisan() {
  php ./$APP_PATH/artisan "$@"
}

_set_mode() {
  composer config extra.monorepo.mode "$1"
}
